# admin_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import ADMIN_IDS
from services.sheets import get_submission_stats, set_score_and_notify_user

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
class ScoreState(StatesGroup):
    waiting_for_score = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: –∑–∞—è–≤–∫–∞_id ‚Üí user_id
pending_scores = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞
def admin_menu_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üì• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_view_apps"),
        types.InlineKeyboardButton("üéØ –ü—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞–ª–ª—ã", callback_data="admin_set_scores"),
        types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="admin_send_news"),
        types.InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="admin_view_rating"),
    )
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /admin
async def admin_start(message: types.Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await state.finish()
        await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def handle_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if not is_admin(callback.from_user.id):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return

    if callback.data == "admin_view_apps":
        count, unique_users = get_submission_stats()
        await callback.message.edit_text(
            f"üì¨ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–∞–Ω–æ {count} –∑–∞—è–≤–æ–∫.\n"
            f"üë• –£—á–∞—Å—Ç–≤—É—é—Ç {unique_users} —á–µ–ª–æ–≤–µ–∫.",
            reply_markup=admin_menu_markup()
        )

    elif callback.data == "admin_set_scores":
        await callback.message.edit_text("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.", reply_markup=admin_menu_markup())

    elif callback.data == "admin_send_news":
        await callback.message.edit_text("üì∞ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=admin_menu_markup())

    elif callback.data == "admin_view_rating":
        await callback.message.edit_text("üìä –§—É–Ω–∫—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=admin_menu_markup())

# üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
async def handle_approve(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    submission_id = callback.data.split("_", 1)[1]
    pending_scores[callback.from_user.id] = submission_id

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å:")
    await ScoreState.waiting_for_score.set()

# üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
async def handle_reject(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")

# üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
async def receive_score(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    score_text = message.text.strip()

    if not score_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    score = int(score_text)
    submission_id = pending_scores.get(admin_id)

    if not submission_id:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
        await state.finish()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É + —É–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    result = set_score_and_notify_user(submission_id, score)

    if result:
        await message.answer("‚úÖ –ë–∞–ª–ª—ã –∑–∞–ø–∏—Å–∞–Ω—ã, —É—á–∞—Å—Ç–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∑–∞—è–≤–∫–∏.")

    await state.finish()
    pending_scores.pop(admin_id, None)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["admin"], state="*")
    dp.register_callback_query_handler(handle_admin_panel, text=[
        "admin_view_apps", "admin_set_scores", "admin_send_news", "admin_view_rating"
    ], state="*")
    dp.register_callback_query_handler(handle_approve, text_startswith="approve_", state="*")
    dp.register_callback_query_handler(handle_reject, text_startswith="reject_", state="*")
    dp.register_message_handler(receive_score, state=ScoreState.waiting_for_score)
