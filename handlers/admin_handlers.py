# admin_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from services.sheets import (
    get_all_user_ids,
    set_score_and_notify_user,
    get_user_scores,
    export_rating_to_sheet
)
from services.common import admin_menu_markup, main_menu_markup
from config import ADMIN_IDS
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞
class AdminStates(StatesGroup):
    waiting_for_news = State()

# –ö–æ–º–∞–Ω–¥–∞ /admin
async def admin_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ (–∫–Ω–æ–ø–∫–∏)
async def handle_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if callback.data == "admin_view_apps":
        await callback.message.answer("üì• –ó–∞—è–≤–∫–∏ –ø–æ–∫–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é.")
    elif callback.data == "admin_set_scores":
        await callback.message.answer("üéØ –î–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.")
    elif callback.data == "admin_send_news":
        await callback.message.answer("üì¢ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:", reply_markup=cancel_news_markup())
        await AdminStates.waiting_for_news.set()
    elif callback.data == "admin_view_rating":
        await callback.message.answer("üìä –†–µ–π—Ç–∏–Ω–≥ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ: https://docs.google.com/spreadsheets/d/your-link")
    elif callback.data == "admin_export_rating":
        export_rating_to_sheet()
        await callback.message.answer("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –≤—ã–≥—Ä—É–∂–µ–Ω –≤ Google –¢–∞–±–ª–∏—Ü—ã.")
    else:
        await callback.message.answer("ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
def cancel_news_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_news"))
    return markup

async def cancel_news(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_news_input(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    text = message.text
    user_ids = get_all_user_ids()

    sent = 0
    for uid in user_ids:
        try:
            await message.bot.send_message(uid, text, reply_markup=main_menu_markup(uid))
            sent += 1
        except Exception as e:
            logging.warning(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
    await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
    await state.finish()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
async def handle_approve(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if callback.data.startswith("approve_"):
        submission_id = callback.data.split("approve_")[1]
        score = 3  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
        success = set_score_and_notify_user(submission_id, score)
        if success:
            await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.")
        else:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É.")
    elif callback.data.startswith("reject_"):
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    else:
        await callback.message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["admin"], state="*")
    dp.register_callback_query_handler(handle_admin_panel, text_startswith="admin_", state="*")
    dp.register_callback_query_handler(cancel_news, text="cancel_news", state=AdminStates.waiting_for_news)
    dp.register_message_handler(handle_news_input, state=AdminStates.waiting_for_news, content_types=types.ContentTypes.TEXT)

