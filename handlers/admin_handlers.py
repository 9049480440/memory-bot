# admin_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import MessageNotModified  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from services.sheets import (
    get_submission_stats,
    set_score_and_notify_user,
    get_all_user_ids,
    get_top_users,
    update_user_score_in_activity,
    export_rating_to_sheet,
    save_user_state,
    get_user_state,
    clear_user_state
)
from services.common import main_menu_markup, is_admin, admin_menu_markup
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞
class ScoreState(StatesGroup):
    waiting_for_score = State()

class AdminStates(StatesGroup):
    waiting_for_news = State()

pending_scores = {}

async def send_admin_panel(message: types.Message):
    if is_admin(message.from_user.id):
        msg = await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
        save_user_state(message.from_user.id, "admin_panel", None, msg.message_id)

async def admin_start(message: types.Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await state.finish()
        msg = await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
        save_user_state(message.from_user.id, "admin_panel", None, msg.message_id)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

async def handle_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = callback.from_user.id
    logging.info(f"handle_admin_panel –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id {user_id} —Å callback.data: {callback.data}")
    
    if not is_admin(user_id):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if callback.data == "admin_view_apps":
        count, unique_users = get_submission_stats()
        text = f"üì¨ –ü–æ–¥–∞–Ω–æ {count} –∑–∞—è–≤–æ–∫ –æ—Ç {unique_users} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        try:
            await callback.message.edit_text(
                text,
                reply_markup=admin_menu_markup()
            )
        except MessageNotModified:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        save_user_state(user_id, "admin_panel", None, callback.message.message_id)

    elif callback.data == "admin_set_scores":
        text = "‚öôÔ∏è –û—Ü–µ–Ω–∫–∞ –∑–∞—è–≤–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏."
        try:
            await callback.message.edit_text(
                text,
                reply_markup=admin_menu_markup()
            )
        except MessageNotModified:
            pass
        save_user_state(user_id, "admin_panel", None, callback.message.message_id)

    elif callback.data == "admin_send_news":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_admin_news"))
        await callback.message.edit_text(
            "üì¢ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:",
            reply_markup=markup
        )
        save_user_state(user_id, "admin_news", None, callback.message.message_id)
        await AdminStates.waiting_for_news.set()
        logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user_id {user_id}: AdminStates.waiting_for_news")
        current_state = await state.get_state()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è user_id {user_id}: {current_state}")

    elif callback.data == "admin_view_rating":
        top_users = get_top_users()

        if not top_users:
            text = "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞."
        else:
            text = "üèÜ <b>–¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
            for i, user in enumerate(top_users, start=1):
                name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
                username = user.get("username", "").strip()
                user_id_str = user.get("user_id", "")
                if username:
                    clean_username = username.lstrip("@")
                    link = f"https://t.me/{clean_username}"
                else:
                    link = f"tg://user?id={user_id_str}"
                text += f"{i}. <a href='{link}'>{name}</a> ‚Äî {user['count']} –∑–∞—è–≤–æ–∫, {user['total']} –±–∞–ª–ª–æ–≤\n"

        try:
            await callback.message.edit_text(
                text,
                reply_markup=admin_menu_markup(),
                parse_mode="HTML"
            )
        except MessageNotModified:
            pass
        save_user_state(user_id, "admin_panel", None, callback.message.message_id)

    elif callback.data == "admin_export_rating":
        export_rating_to_sheet()
        try:
            await callback.message.edit_text(
                "‚úÖ –†–µ–π—Ç–∏–Ω–≥ –≤—ã–≥—Ä—É–∂–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É!",
                reply_markup=admin_menu_markup()
            )
        except MessageNotModified:
            pass
        save_user_state(user_id, "admin_panel", None, callback.message.message_id)

    elif callback.data == "cancel_admin_news":
        await state.finish()
        clear_user_state(user_id)
        try:
            await callback.message.edit_text(
                "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=admin_menu_markup()
            )
        except MessageNotModified:
            pass
        save_user_state(user_id, "admin_panel", None, callback.message.message_id)

async def handle_approve(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        return

    submission_id = callback.data.split("_", 1)[1]
    pending_scores[user_id] = submission_id

    await callback.message.edit_reply_markup()
    msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å:")
    save_user_state(user_id, "waiting_for_score", {"submission_id": submission_id}, msg.message_id)
    await ScoreState.waiting_for_score.set()

async def handle_reject(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await callback.message.edit_reply_markup()
    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    msg = await callback.message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
    save_user_state(user_id, "admin_panel", None, msg.message_id)

async def receive_score(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    score_text = message.text.strip()

    if not score_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    score = int(score_text)
    submission_id = pending_scores.get(user_id)

    if not submission_id:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
        await state.finish()
        await send_admin_panel(message)
        return

    result = set_score_and_notify_user(submission_id, score)

    if result:
        user_id_str = submission_id.split("_")[0]
        update_user_score_in_activity(user_id_str)
        await message.answer("‚úÖ –ë–∞–ª–ª—ã –∑–∞–ø–∏—Å–∞–Ω—ã, —É—á–∞—Å—Ç–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await send_admin_panel(message)
    await state.finish()
    pending_scores.pop(user_id, None)

async def send_news_to_users(message: types.Message, state: FSMContext):
    logging.info(f"send_news_to_users –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id {message.from_user.id} —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    user_id = message.from_user.id
    await state.finish()
    clear_user_state(user_id)
    users = get_all_user_ids()
    sent = 0
    for user_id in users:
        try:
            if message.photo:
                await message.bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "", reply_markup=main_menu_markup(user_id=user_id))
            elif message.video:
                await message.bot.send_video(user_id, message.video.file_id, caption=message.caption or "", reply_markup=main_menu_markup(user_id=user_id))
            elif message.text:
                await message.bot.send_message(user_id, message.text, reply_markup=main_menu_markup(user_id=user_id))
            sent += 1
        except Exception as e:
            logging.warning(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    msg = await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
    save_user_state(user_id, "admin_panel", None, msg.message_id)

def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["admin"], state="*")
    dp.register_callback_query_handler(handle_admin_panel, text=[
        "admin_view_apps", "admin_set_scores", "admin_send_news", "admin_view_rating", "admin_export_rating", "cancel_admin_news"
    ], state="*")
    dp.register_callback_query_handler(handle_approve, text_startswith="approve_", state="*")
    dp.register_callback_query_handler(handle_reject, text_startswith="reject_", state="*")
    dp.register_message_handler(receive_score, state=ScoreState.waiting_for_score)
    dp.register_message_handler(send_news_to_users, content_types=types.ContentTypes.ANY, state=AdminStates.waiting_for_news)
