# admin_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import ADMIN_IDS
from services.sheets import (
    get_submission_stats,
    set_score_and_notify_user,
    get_all_user_ids,
    get_top_users,
    update_user_score_in_activity,
    export_rating_to_sheet,
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ScoreState(StatesGroup):
    waiting_for_score = State()

class NewsState(StatesGroup):
    waiting_for_news = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
pending_scores = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–¥–º–∏–Ω –ª–∏
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
def admin_menu_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üì• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_view_apps"),
        types.InlineKeyboardButton("üéØ –ü—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞–ª–ª—ã", callback_data="admin_set_scores"),
        types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="admin_send_news"),
        types.InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="admin_view_rating"),
        types.InlineKeyboardButton("üìà –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="admin_export_rating")
    )
    return markup

# /admin
async def admin_start(message: types.Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await state.finish()
        await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if not is_admin(callback.from_user.id):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if callback.data == "admin_view_apps":
        count, unique_users = get_submission_stats()
        await callback.message.edit_text(
            f"üì¨ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–∞–Ω–æ {count} –∑–∞—è–≤–æ–∫.\n"
            f"üë• –£—á–∞—Å—Ç–≤—É—é—Ç {unique_users} —á–µ–ª–æ–≤–µ–∫.",
            reply_markup=admin_menu_markup()
        )

    elif callback.data == "admin_set_scores":
        await callback.message.edit_text(
            "‚öôÔ∏è –û—Ü–µ–Ω–∫–∞ –∑–∞—è–≤–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.",
            reply_markup=admin_menu_markup()
        )

elif callback.data == "admin_send_news":
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å", callback_data="cancel_admin_news"))
    await callback.message.edit_text(
        "üì¢ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.):",
        reply_markup=markup
    )
    await NewsState.waiting_for_news.set()


    elif callback.data == "admin_view_rating":
        top_users = get_top_users()

        text = ""
        if not top_users:
            text = "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞."
        else:
            text = "üèÜ –¢–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
            for i, user in enumerate(top_users, start=1):
                name = user["name"] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                username = user.get("username")
                if username:
                    name = f"[{name}](https://t.me/{username})"
                text += f"{i}. {name} ‚Äî {user['count']} –∑–∞—è–≤–æ–∫, {user['total']} –±–∞–ª–ª–æ–≤\n"

        await callback.message.edit_text(text, reply_markup=admin_menu_markup(), parse_mode="Markdown")

    elif callback.data == "admin_export_rating":
        export_rating_to_sheet()
        await callback.message.edit_text("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –≤—ã–≥—Ä—É–∂–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É!", reply_markup=admin_menu_markup())

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É
async def handle_approve(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return

    submission_id = callback.data.split("_", 1)[1]
    pending_scores[callback.from_user.id] = submission_id

    await callback.message.edit_reply_markup()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å:")
    await ScoreState.waiting_for_score.set()

# ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
async def handle_reject(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    await callback.message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())

# –í–≤–æ–¥ –±–∞–ª–ª–æ–≤
async def receive_score(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    score_text = message.text.strip()

    if not score_text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    score = int(score_text)
    submission_id = pending_scores.get(admin_id)

    if not submission_id:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
        await state.finish()
        return

    result = set_score_and_notify_user(submission_id, score)

    if result:
        user_id = submission_id.split("_")[0]
        update_user_score_in_activity(user_id, score)
        await message.answer("‚úÖ –ë–∞–ª–ª—ã –∑–∞–ø–∏—Å–∞–Ω—ã, —É—á–∞—Å—Ç–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∑–∞—è–≤–∫–∏.")

    await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
    await state.finish()
    pending_scores.pop(admin_id, None)

# üì§ –†–∞—Å—Å—ã–ª–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
async def send_news_to_users(message: types.Message, state: FSMContext):
    await state.finish()
    users = get_all_user_ids()

    if not users:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
        return

    sent = 0
    for user_id in users:
        try:
            if message.photo:
                await message.bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "")
            elif message.video:
                await message.bot.send_video(user_id, message.video.file_id, caption=message.caption or "")
            elif message.text:
                await message.bot.send_message(user_id, message.text)
            sent += 1
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())

async def cancel_news(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_menu_markup())


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["admin"], state="*")
    dp.register_callback_query_handler(handle_admin_panel, text=[
        "admin_view_apps", "admin_set_scores", "admin_send_news", "admin_view_rating", "admin_export_rating"
    ], state="*")
    dp.register_callback_query_handler(handle_approve, text_startswith="approve_", state="*")
    dp.register_callback_query_handler(handle_reject, text_startswith="reject_", state="*")
    dp.register_message_handler(receive_score, state=ScoreState.waiting_for_score)
    dp.register_message_handler(send_news_to_users, content_types=types.ContentTypes.ANY, state=NewsState.waiting_for_news)
    dp.register_callback_query_handler(cancel_news, text="cancel_admin_news", state=NewsState.waiting_for_news)

