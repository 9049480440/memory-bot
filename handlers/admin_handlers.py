# admin_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from config import ADMIN_IDS
from services.sheets import get_submission_stats

# –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞
def admin_menu_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üì• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_view_apps"),
        types.InlineKeyboardButton("üéØ –ü—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞–ª–ª—ã", callback_data="admin_set_scores"),
        types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="admin_send_news"),
        types.InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="admin_view_rating"),
    )
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /admin (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
async def admin_start(message: types.Message, state: FSMContext):
    if is_admin(message.from_user.id):
        await state.finish()
        await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")

# üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def handle_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()

    if not is_admin(callback.from_user.id):
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    if callback.data == "admin_view_apps":
        count, unique_users = get_submission_stats()
        await callback.message.edit_text(
            f"üì¨ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–∞–Ω–æ {count} –∑–∞—è–≤–æ–∫.\n"
            f"üë• –£—á–∞—Å—Ç–≤—É—é—Ç {unique_users} —á–µ–ª–æ–≤–µ–∫.",
            reply_markup=admin_menu_markup()
        )

    elif callback.data == "admin_set_scores":
        await callback.message.edit_text("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=admin_menu_markup())

    elif callback.data == "admin_send_news":
        await callback.message.edit_text("üì∞ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=admin_menu_markup())

    elif callback.data == "admin_view_rating":
        await callback.message.edit_text("üìä –§—É–Ω–∫—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=admin_menu_markup())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["admin"], state="*")
    dp.register_callback_query_handler(handle_admin_panel, text=[
        "admin_view_apps", "admin_set_scores", "admin_send_news", "admin_view_rating"
    ], state="*")
