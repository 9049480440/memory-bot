from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import datetime

from services.sheets import submit_application

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class ApplicationState(StatesGroup):
    waiting_for_link = State()
    waiting_for_date = State()
    waiting_for_location = State()
    waiting_for_name = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
incomplete_users = {}

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
def ask_question_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_gpt"))
    return markup

# –°—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã
async def start_application(message: types.Message):
    user_id = message.from_user.id
    incomplete_users[user_id] = datetime.datetime.now()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É –ø–∞–º—è—Ç–Ω–∏–∫–∞.")
    await ApplicationState.waiting_for_link.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
async def process_link(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if "?" in text or len(text.split()) > 10:
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç–µ. "
            "–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=ask_question_markup()
        )
        return

    if not (text.startswith("http://") or text.startswith("https://")):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá",
            reply_markup=ask_question_markup()
        )
        return

    await state.update_data(link=text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—ä—ë–º–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await ApplicationState.waiting_for_date.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
async def process_date(message: types.Message, state: FSMContext):
    try:
        datetime.datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    await state.update_data(date=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å—ä—ë–º–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    await ApplicationState.waiting_for_location.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞
async def process_location(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(location=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    await ApplicationState.waiting_for_name.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def process_name(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(name=message.text)
    data = await state.get_data()

    link = data.get("link")
    date_text = data.get("date")
    location = data.get("location")
    monument_name = data.get("name")

    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, submit_application, message.from_user, date_text, location, monument_name, link)

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
    await state.finish()
    incomplete_users.pop(message.from_user.id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /cancel
async def cancel_application(message: types.Message, state: FSMContext):
    await state.finish()
    incomplete_users.pop(message.from_user.id, None)
    await message.answer("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª.")

# üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
async def handle_callback_query(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    incomplete_users.pop(callback_query.from_user.id, None)
    await callback_query.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å ü§ñ")
    # GPT-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_application_handlers(dp: Dispatcher):
    dp.register_message_handler(start_application, text="üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", state="*")
    dp.register_message_handler(process_link, state=ApplicationState.waiting_for_link)
    dp.register_message_handler(process_date, state=ApplicationState.waiting_for_date)
    dp.register_message_handler(process_location, state=ApplicationState.waiting_for_location)
    dp.register_message_handler(process_name, state=ApplicationState.waiting_for_name)
    dp.register_message_handler(cancel_application, commands=["cancel"], state="*")
    dp.register_callback_query_handler(handle_callback_query, text="ask_gpt", state="*")
