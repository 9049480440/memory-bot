# application_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import datetime
import json
import logging
import re


from services.sheets import submit_application, save_user_state, get_user_state, clear_user_state
from config import ADMIN_IDS
from services.common import main_menu_markup

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class ApplicationState(StatesGroup):
    waiting_for_link = State()
    waiting_for_date = State()
    waiting_for_location = State()
    waiting_for_name = State()

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
def ask_question_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_gpt"))
    markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel_app"))
    return markup

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–Ω–∫–µ—Ç—ã
def cancel_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel_app"))
    return markup

# –°—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã
async def start_application(message: types.Message):
    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö
    current_time = datetime.datetime.now().isoformat()
    save_user_state(user_id, "application_step_1", {"start_time": current_time})
    msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É –ø–∞–º—è—Ç–Ω–∏–∫–∞.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=cancel_markup()
    )
    save_user_state(user_id, "application_step_1", {"start_time": current_time}, msg.message_id)
    await ApplicationState.waiting_for_link.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–º–µ–¥–∏–∞—Ñ–∞–π–ª—ã) –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
async def handle_invalid_content(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    current_state = await state.get_state()
    user_id = message.from_user.id
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_state == "ApplicationState:waiting_for_link":
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –∞ –Ω–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª.\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –≤–∞—à –ø–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç–∏ —Å —Ö–µ—à—Ç–µ–≥–æ–º #–û—Ç–ü–∞–º—è—Ç–Ω–∏–∫–∞–ö–ü–∞–º—è—Ç–∏.",
            reply_markup=cancel_markup()
        )
    elif current_state == "ApplicationState:waiting_for_date":
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15.04.2025.",
            reply_markup=cancel_markup()
        )
    elif current_state == "ApplicationState:waiting_for_location":
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=cancel_markup()
        )
    elif current_state == "ApplicationState:waiting_for_name":
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=cancel_markup()
        )
    else:
        # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await message.answer(
            "ü§î –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=main_menu_markup(user_id=user_id)
        )
        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
def is_valid_url(text):
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL
    url_pattern = re.compile(
        r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+(?:/[-\w%!./?=&]*)?'
    )
    return bool(url_pattern.match(text))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL
def contains_multiple_urls(text):
    url_pattern = re.compile(
        r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+(?:/[-\w%!./?=&]*)?'
    )
    urls = url_pattern.findall(text)
    return len(urls) > 1

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
async def process_link(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip() if message.text else ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL
    if not is_valid_url(text):
        if "?" in text or len(text.split()) > 10:
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –¥–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá",
                reply_markup=ask_question_markup()
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç–∏.\n"
                "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://",
                reply_markup=cancel_markup()
            )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL
    if contains_multiple_urls(text):
        await message.answer(
            "‚ö†Ô∏è –Ø –∑–∞–º–µ—Ç–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.\n"
            "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞—è–≤–∫—É.",
            reply_markup=cancel_markup()
        )
        return

    await state.update_data(link=text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_user_state(user_id, "application_step_2", {"link": text})
    msg = await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—ä—ë–º–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", 
        reply_markup=cancel_markup()
    )
    save_user_state(user_id, "application_step_2", {"link": text}, msg.message_id)
    await ApplicationState.waiting_for_date.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
def is_valid_date(date_text):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        date_obj = datetime.datetime.strptime(date_text, "%d.%m.%Y")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
        if date_obj > datetime.datetime.now():
            return False, "–¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ 1 –∞–ø—Ä–µ–ª—è 2025
        start_date = datetime.datetime(2025, 4, 1)
        if date_obj < start_date:
            return False, "–¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞"
        
        return True, date_obj
    except ValueError:
        return False, "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
async def process_date(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    date_text = message.text.strip() if message.text else ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    is_valid, result = is_valid_date(date_text)
    
    if not is_valid:
        if result == "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç":
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15.04.2025.",
                reply_markup=cancel_markup()
            )
        elif result == "–¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º":
            await message.answer(
                "‚ö†Ô∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Å—ä–µ–º–∫–∏.",
                reply_markup=cancel_markup()
            )
        elif result == "–¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞":
            await message.answer(
                "‚ö†Ô∏è –î–∞—Ç–∞ —Å—ä–µ–º–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ 01.04.2025 (–Ω–∞—á–∞–ª–æ –∫–æ–Ω–∫—É—Ä—Å–∞).\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.",
                reply_markup=cancel_markup()
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–∞
    data = await state.get_data()
    link = data.get("link", "")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data["date"] = date_text
    await state.update_data(data)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Sheets
    full_data = {
        "link": link,
        "date": date_text,
        "start_time": data.get("start_time", datetime.datetime.now().isoformat())
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ process_date: {full_data}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Google Sheets, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    save_user_state(user_id, "application_step_3", full_data)
    msg = await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å—ä—ë–º–∫–∏ (–≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç):", 
        reply_markup=cancel_markup()
    )
    save_user_state(user_id, "application_step_3", full_data, msg.message_id)
    await ApplicationState.waiting_for_location.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞
async def process_location(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
    if not message.text or len(message.text.strip()) < 2:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.",
            reply_markup=cancel_markup()
        )
        return
    
    location = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–∞
    data = await state.get_data()
    link = data.get("link", "")
    date_text = data.get("date", "")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data["location"] = location
    await state.update_data(data)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Sheets
    full_data = {
        "link": link, 
        "date": date_text, 
        "location": location,
        "start_time": data.get("start_time", datetime.datetime.now().isoformat())
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ process_location: {full_data}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Google Sheets, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    save_user_state(user_id, "application_step_4", full_data)
    msg = await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", 
        reply_markup=cancel_markup()
    )
    save_user_state(user_id, "application_step_4", full_data, msg.message_id)
    await ApplicationState.waiting_for_name.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
    if not message.text or len(message.text.strip()) < 3:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).",
            reply_markup=cancel_markup()
        )
        return
    
    monument_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets
    current_state, state_data, _ = get_user_state(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–∞ aiogram
    aiogram_data = await state.get_data()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    logging.info(f"[DEBUG] –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets: {state_data}")
    logging.info(f"[DEBUG] –î–∞–Ω–Ω—ã–µ –∏–∑ aiogram state: {aiogram_data}")
    
    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    link = ""
    date_text = ""
    location = ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ aiogram state
    if aiogram_data and isinstance(aiogram_data, dict):
        link = aiogram_data.get("link", "")
        date_text = aiogram_data.get("date", "")
        location = aiogram_data.get("location", "")
        logging.info(f"[DEBUG] –î–∞–Ω–Ω—ã–µ –∏–∑ aiogram state —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ aiogram state, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ Google Sheets
    if (not link or not date_text or not location) and state_data and isinstance(state_data, dict):
        link = state_data.get("link", "")
        date_text = state_data.get("date", "")
        location = state_data.get("location", "")
        logging.info(f"[DEBUG] –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not link or not date_text or not location:
        await message.answer(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_markup(user_id)
        )
        clear_user_state(user_id)
        await state.finish()
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    logging.info(f"[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏: date_text={date_text}, location={location}, monument_name={monument_name}, link={link}")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        submission_id = submit_application(message.from_user, date_text, location, monument_name, link)
        
        if submission_id:
            await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
            msg = await message.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(message.from_user.id))
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            clear_user_state(user_id)
            save_user_state(user_id, "main_menu", None, msg.message_id)
            await state.finish()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    markup = InlineKeyboardMarkup()
                    markup.add(
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{submission_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{submission_id}")
                    )
                    text = (
                        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                        f"üë§ {message.from_user.full_name}\n"
                        f"üìç {monument_name}\n"
                        f"üóì –î–∞—Ç–∞ —Å—ä–µ–º–∫–∏: {date_text}\n"
                        f"üèô –ú–µ—Å—Ç–æ: {location}\n"
                        f"üîó {link}"
                    )
                    await message.bot.send_message(admin_id, text, reply_markup=markup)
                except Exception as e:
                    logging.error(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É] {e}")
        else:
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                reply_markup=main_menu_markup(message.from_user.id)
            )
            await state.finish()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=main_menu_markup(message.from_user.id)
        )
        await state.finish()

# –û—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã (–ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ)
async def cancel_application(message_or_callback, state: FSMContext):
    user_id = message_or_callback.from_user.id if isinstance(message_or_callback, types.Message) else message_or_callback.from_user.id
    await state.finish()
    clear_user_state(user_id)
    
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        msg = await message_or_callback.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(user_id))
    elif isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.edit_text("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        msg = await message_or_callback.message.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(user_id))
    
    save_user_state(user_id, "main_menu", None, msg.message_id)

# –ö–Ω–æ–ø–∫–∞ GPT
async def handle_callback_query(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await state.finish()
    clear_user_state(user_id)
    await callback_query.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å ü§ñ")
    msg = await callback_query.message.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(user_id))
    save_user_state(user_id, "main_menu", None, msg.message_id)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_application_handlers(dp: Dispatcher):
    dp.register_message_handler(start_application, text="üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", state="*")
    dp.register_message_handler(process_link, state=ApplicationState.waiting_for_link, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(process_date, state=ApplicationState.waiting_for_date, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(process_location, state=ApplicationState.waiting_for_location, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(process_name, state=ApplicationState.waiting_for_name, content_types=types.ContentTypes.TEXT)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    dp.register_message_handler(
        handle_invalid_content, 
        state=[
            ApplicationState.waiting_for_link, 
            ApplicationState.waiting_for_date, 
            ApplicationState.waiting_for_location, 
            ApplicationState.waiting_for_name
        ], 
        content_types=types.ContentTypes.ANY
    )
    
    dp.register_message_handler(cancel_application, commands=["cancel"], state="*")
    dp.register_callback_query_handler(cancel_application, text="cancel_app", state="*")
    dp.register_callback_query_handler(handle_callback_query, text="ask_gpt", state="*")
