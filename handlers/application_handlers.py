# application_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import datetime
import json
import logging


from services.sheets import submit_application, save_user_state, get_user_state, clear_user_state
from config import ADMIN_IDS
from services.common import main_menu_markup

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class ApplicationState(StatesGroup):
    waiting_for_link = State()
    waiting_for_date = State()
    waiting_for_location = State()
    waiting_for_name = State()

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
def ask_question_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_gpt"))
    markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel_app"))
    return markup

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–Ω–∫–µ—Ç—ã
def cancel_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel_app"))
    return markup

# –°—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã
async def start_application(message: types.Message):
    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö
    current_time = datetime.datetime.now().isoformat()
    save_user_state(user_id, "application_step_1", {"start_time": current_time})
    msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É –ø–∞–º—è—Ç–Ω–∏–∫–∞.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=cancel_markup()
    )
    save_user_state(user_id, "application_step_1", {"start_time": current_time}, msg.message_id)
    await ApplicationState.waiting_for_link.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
async def process_link(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    if "?" in text or len(text.split()) > 10 or not text.startswith("http"):
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –¥–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá",
            reply_markup=ask_question_markup()
        )
        return

    await state.update_data(link=text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_user_state(user_id, "application_step_2", {"link": text})
    msg = await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—ä—ë–º–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", 
        reply_markup=cancel_markup()
    )
    save_user_state(user_id, "application_step_2", {"link": text}, msg.message_id)
    await ApplicationState.waiting_for_date.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
async def process_date(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        date_obj = datetime.datetime.strptime(message.text, "%d.%m.%Y")
        date_text = message.text
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", 
            reply_markup=cancel_markup()
        )
        return
    
    data = await state.get_data()
    data["date"] = date_text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_user_state(user_id, "application_step_3", data)
    msg = await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å—ä—ë–º–∫–∏ (–≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç):", 
        reply_markup=cancel_markup()
    )
    save_user_state(user_id, "application_step_3", data, msg.message_id)
    await ApplicationState.waiting_for_location.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞
async def process_location(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    data["location"] = message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_user_state(user_id, "application_step_4", data)
    msg = await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", 
        reply_markup=cancel_markup()
    )
    save_user_state(user_id, "application_step_4", data, msg.message_id)
    await ApplicationState.waiting_for_name.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    data["name"] = message.text

    link = data.get("link", "")
    date_text = data.get("date", "")
    location = data.get("location", "")
    monument_name = data.get("name", "")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    logging.info(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏: date_text={date_text}, location={location}, monument_name={monument_name}, link={link}")

    try:
        submission_id = submit_application(message.from_user, date_text, location, monument_name, link)
        
        
        if submission_id:
            await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
            msg = await message.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(message.from_user.id))
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            clear_user_state(user_id)
            save_user_state(user_id, "main_menu", None, msg.message_id)
            await state.finish()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    markup = InlineKeyboardMarkup()
                    markup.add(
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{submission_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{submission_id}")
                    )
                    text = (
                        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                        f"üë§ {message.from_user.full_name}\n"
                        f"üìç {monument_name}\n"
                        f"üìÖ {date_text}, {location}\n"
                        f"üîó {link}"
                    )
                    await message.bot.send_message(admin_id, text, reply_markup=markup)
                except Exception as e:
                    logging.error(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É] {e}")
        else:
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                reply_markup=main_menu_markup(message.from_user.id)
            )
            await state.finish()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=main_menu_markup(message.from_user.id)
        )
        await state.finish()

# –û—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã (–ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ)
async def cancel_application(message_or_callback, state: FSMContext):
    user_id = message_or_callback.from_user.id if isinstance(message_or_callback, types.Message) else message_or_callback.from_user.id
    await state.finish()
    clear_user_state(user_id)
    
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        msg = await message_or_callback.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(user_id))
    elif isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.edit_text("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        msg = await message_or_callback.message.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(user_id))
    
    save_user_state(user_id, "main_menu", None, msg.message_id)

# –ö–Ω–æ–ø–∫–∞ GPT
async def handle_callback_query(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await state.finish()
    clear_user_state(user_id)
    await callback_query.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å ü§ñ")
    msg = await callback_query.message.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(user_id))
    save_user_state(user_id, "main_menu", None, msg.message_id)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_application_handlers(dp: Dispatcher):
    dp.register_message_handler(start_application, text="üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", state="*")
    dp.register_message_handler(process_link, state=ApplicationState.waiting_for_link)
    dp.register_message_handler(process_date, state=ApplicationState.waiting_for_date)
    dp.register_message_handler(process_location, state=ApplicationState.waiting_for_location)
    dp.register_message_handler(process_name, state=ApplicationState.waiting_for_name)
    dp.register_message_handler(cancel_application, commands=["cancel"], state="*")
    dp.register_callback_query_handler(cancel_application, text="cancel_app", state="*")
    dp.register_callback_query_handler(handle_callback_query, text="ask_gpt", state="*")
