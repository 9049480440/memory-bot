from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
import datetime

from services.sheets import submit_application

class ApplicationState(StatesGroup):
    waiting_for_link = State()
    waiting_for_date = State()
    waiting_for_location = State()
    waiting_for_name = State()

async def start_application(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É –ø–∞–º—è—Ç–Ω–∏–∫–∞.")
    await ApplicationState.waiting_for_link.set()

async def process_link(message: types.Message, state: FSMContext):
    if "?" in message.text or len(message.text.split()) > 10:
        await message.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Ç–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ /cancel ‚Äî –∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.")
        return

    link = message.text.strip()
    if not (link.startswith("http://") or link.startswith("https://")):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://")
        return
    await state.update_data(link=link)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—ä—ë–º–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await ApplicationState.waiting_for_date.set()

async def process_date(message: types.Message, state: FSMContext):
    try:
        datetime.datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    await state.update_data(date=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å—ä—ë–º–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    await ApplicationState.waiting_for_location.set()

async def process_location(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(location=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    await ApplicationState.waiting_for_name.set()

async def process_name(message: types.Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(name=message.text)
    data = await state.get_data()

    link = data.get("link")
    date_text = data.get("date")
    location = data.get("location")
    monument_name = data.get("name")

    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, submit_application, message.from_user, date_text, location, monument_name, link)

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã
async def cancel_application(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª.")

def register_application_handlers(dp: Dispatcher):
    dp.register_message_handler(start_application, text="üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", state="*")
    dp.register_message_handler(process_link, state=ApplicationState.waiting_for_link)
    dp.register_message_handler(process_date, state=ApplicationState.waiting_for_date)
    dp.register_message_handler(process_location, state=ApplicationState.waiting_for_location)
    dp.register_message_handler(process_name, state=ApplicationState.waiting_for_name)
    dp.register_message_handler(cancel_application, commands=["cancel"], state="*")
