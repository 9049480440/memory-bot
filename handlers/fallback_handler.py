# handlers/fallback_handler.py

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import any_state
from handlers.gpt_handler import ask_gpt
from config import ADMIN_IDS
from services.common import admin_menu_markup, main_menu_markup
from handlers.admin_handlers import AdminStates  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AdminStates –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
import logging

async def handle_unknown(message: types.Message):
    user_id = message.from_user.id
    is_admin = user_id in ADMIN_IDS

    if not message.text:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return

    text = message.text.strip()

    if text.startswith("http"):
        await message.answer("–≠—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å? –ï—Å–ª–∏ –¥–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª, —á—Ç–æ–±—ã –º—ã –µ—ë —É—á–ª–∏.")
    elif "?" in text or len(text.split()) > 3:
        await message.answer("–í—ã –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å. –°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å...")
        await ask_gpt(user_id=user_id, text=text, bot=message.bot)
    else:
        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?")

    if is_admin:
        await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())

def register_fallback(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∏—Å–∫–ª—é—á–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ AdminStates.waiting_for_news
    dp.register_message_handler(
        handle_unknown,
        content_types=types.ContentTypes.ANY,
        state=any_state,  # –î–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_not=AdminStates.waiting_for_news  # –ö—Ä–æ–º–µ AdminStates.waiting_for_news
    )
