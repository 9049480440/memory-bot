# handlers/fallback_handler.py

from aiogram import types, Dispatcher
from handlers.gpt_handler import ask_gpt
from config import ADMIN_IDS
from handlers.admin_handlers import admin_menu_markup
from services.common import main_menu_markup
import logging
import re

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
def is_url(text):
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL
    url_pattern = re.compile(
        r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+(?:/[-\w%!./?=&]*)?'
    )
    return bool(url_pattern.match(text))

async def handle_unknown_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    user_id = message.from_user.id
    is_admin = user_id in ADMIN_IDS

    text = message.text.strip()
    answer = None

    try:
        # –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        if is_url(text):
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É.\n\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É üëá",
                reply_markup=markup
            )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –≤ GPT
        elif "?" in text or len(text.split()) > 3:
            await message.answer("–°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å... ü§ñ")
            answer = await ask_gpt(text)
            await message.answer(answer, reply_markup=main_menu_markup(user_id), parse_mode="Markdown")

        # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply"))
            markup.add(types.InlineKeyboardButton("üìå –û –∫–æ–Ω–∫—É—Ä—Å–µ", callback_data="info"))
            markup.add(types.InlineKeyboardButton("‚≠êÔ∏è –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="scores"))

            await message.answer(
                "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ü§î\n\n"
                "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:",
                reply_markup=markup
            )

        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∂–µ–º –ø–∞–Ω–µ–ª—å
        if is_admin:
            await message.answer(
                "üõ° *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:*",
                reply_markup=admin_menu_markup(),
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"Error in fallback handler: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é /menu.",
            reply_markup=main_menu_markup(user_id)
        )

async def handle_media(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    user_id = message.from_user.id
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply"))
    markup.add(types.InlineKeyboardButton("üìå –û –∫–æ–Ω–∫—É—Ä—Å–µ", callback_data="info"))
    markup.add(types.InlineKeyboardButton("‚≠êÔ∏è –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="scores"))
    
    media_type = "—Ñ–æ—Ç–æ" if message.photo else "–≤–∏–¥–µ–æ" if message.video else "–∞—É–¥–∏–æ" if message.audio else "—Ñ–∞–π–ª"
    
    await message.answer(
        f"–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à {media_type}, –Ω–æ –Ω–µ –º–æ–≥—É –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é.\n\n"
        f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ —ç—Ç–æ—Ç {media_type} –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö "
        f"—Å —Ö–µ—à—Ç–µ–≥–æ–º #–û—Ç–ü–∞–º—è—Ç–Ω–∏–∫–∞–ö–ü–∞–º—è—Ç–∏, –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'.",
        reply_markup=markup
    )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∂–µ–º –ø–∞–Ω–µ–ª—å
    if user_id in ADMIN_IDS:
        await message.answer(
            "üõ° *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:*",
            reply_markup=admin_menu_markup(),
            parse_mode="Markdown"
        )

def register_fallback(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.register_message_handler(handle_unknown_text, content_types=types.ContentTypes.TEXT, state="*", is_forwarded=False)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    dp.register_message_handler(
        handle_media, 
        content_types=[
            types.ContentType.PHOTO, 
            types.ContentType.VIDEO, 
            types.ContentType.AUDIO, 
            types.ContentType.DOCUMENT,
            types.ContentType.VOICE,
            types.ContentType.STICKER
        ], 
        state="*",
        is_forwarded=False
    )
