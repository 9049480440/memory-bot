# handlers/fallback_handler.py

from aiogram import types, Dispatcher
from handlers.gpt_handler import ask_gpt
from config import ADMIN_IDS
from handlers.admin_handlers import admin_menu_markup
from services.common import main_menu_markup
import logging

logger = logging.getLogger(__name__)

async def handle_unknown(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    user_id = message.from_user.id
    is_admin = user_id in ADMIN_IDS

    text = message.text.strip()

    try:
        # –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        if text.startswith("http"):
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel_app"))
            
            await message.answer(
                "–≠—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å? –ï—Å–ª–∏ –¥–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª, —á—Ç–æ–±—ã –º—ã –µ—ë —É—á–ª–∏.",
                reply_markup=markup
            )
        
        # –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
        elif "?" in text or len(text.split()) > 3:
            await message.answer("–í—ã –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å. –°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å...")
            answer = await ask_gpt(text)
            await message.answer(answer, reply_markup=main_menu_markup(user_id))
        
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply"))
            markup.add(types.InlineKeyboardButton("üìå –û –∫–æ–Ω–∫—É—Ä—Å–µ", callback_data="info"))
            markup.add(types.InlineKeyboardButton("‚≠êÔ∏è –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="scores"))
        await message.answer(answer, reply_markup=main_menu_markup(user_id), parse_mode='Markdown')    


        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if is_admin:
            await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
            
    except Exception as e:
        logger.error(f"Error in fallback handler: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –≤—Å–µ–≥–¥–∞ –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.",
            reply_markup=main_menu_markup(user_id)
        )

def register_fallback(dp: Dispatcher):
    dp.register_message_handler(handle_unknown, content_types=types.ContentTypes.TEXT, state="*")
