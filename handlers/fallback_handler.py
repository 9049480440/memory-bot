# handlers/fallback_handler.py

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters.state import any_state
from handlers.gpt_handler import ask_gpt
from config import ADMIN_IDS
from services.common import admin_menu_markup, main_menu_markup
from handlers.admin_handlers import AdminStates  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AdminStates
import logging

# –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è AdminStates.waiting_for_news
class NotWaitingForNewsFilter(BoundFilter):
    key = 'not_waiting_for_news'

    def __init__(self, not_waiting_for_news: bool = True):
        self.not_waiting_for_news = not_waiting_for_news

    async def check(self, message: types.Message, state: 'FSMContext' = None) -> bool:
        if not self.not_waiting_for_news:
            return True  # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        current_state = await state.get_state()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï AdminStates:waiting_for_news
        return current_state != AdminStates.waiting_for_news.state

async def handle_unknown(message: types.Message):
    user_id = message.from_user.id
    is_admin = user_id in ADMIN_IDS

    if not message.text:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return

    text = message.text.strip()

    if text.startswith("http"):
        await message.answer("–≠—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å? –ï—Å–ª–∏ –¥–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª, —á—Ç–æ–±—ã –º—ã –µ—ë —É—á–ª–∏.")
    elif "?" in text or len(text.split()) > 3:
        await message.answer("–í—ã –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å. –°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å...")
        await ask_gpt(user_id=user_id, text=text, bot=message.bot)
    else:
        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?")

    if is_admin:
        await message.answer("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())

def register_fallback(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
    dp.filters_factory.bind(NotWaitingForNewsFilter)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
    dp.register_message_handler(
        handle_unknown,
        content_types=types.ContentTypes.ANY,
        state=any_state,  # –î–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        not_waiting_for_news=True  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    )
