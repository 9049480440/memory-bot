# user_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
import logging
from services.sheets import add_or_update_user, get_user_scores, save_user_state, get_user_state, clear_user_state
from handlers.application_handlers import start_application, ApplicationState, cancel_markup
from services.common import main_menu_markup, is_admin, admin_menu_markup

logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.finish()
    user_id = message.from_user.id
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        add_or_update_user(message.from_user)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        msg = await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å ¬´–≠—Å—Ç–∞—Ñ–µ—Ç–∞ –ü–æ–±–µ–¥—ã¬ª! üëá",
            reply_markup=main_menu_markup(user_id)
        )
        save_user_state(user_id, "main_menu", None, msg.message_id)
        logger.info(f"User {user_id} started the bot")
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await state.finish()
    user_id = callback.from_user.id
    current_state, state_data, last_message_id = get_user_state(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    if current_state.startswith("application_step"):
        step = int(current_state.split("_")[-1])
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="continue_app"))
        markup.add(types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", callback_data="apply"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        
        await callback.message.edit_text(
            "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é?",
            reply_markup=markup
        )
        return

    if callback.data == "info":
        text = (
            "üìç –ö–æ–Ω–∫—É—Ä—Å –ø—Ä–∏—É—Ä–æ—á–µ–Ω –∫ 80-–ª–µ—Ç–∏—é –ü–æ–±–µ–¥—ã –∏ –ì–æ–¥—É –ó–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞.\n\n"
            "–£—á–∞—Å—Ç–≤—É–π—Ç–µ, –ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–æ—Å—Ç—ã —É –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤, –∫–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n\n"
            "üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://docs.google.com/document/d/your-link-here"
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=main_menu_markup(user_id)
            )
            save_user_state(user_id, "main_menu", None, callback.message.message_id)
        except Exception as e:
            logger.error(f"Error updating message: {e}")
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /menu"
            )

    elif callback.data == "apply":
        await callback.message.edit_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏!")
        await start_application(callback.message)

    elif callback.data == "continue_app":
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        if current_state == "application_step_1":
            await callback.message.edit_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É –ø–∞–º—è—Ç–Ω–∏–∫–∞:",
                reply_markup=cancel_markup()
            )
            await ApplicationState.waiting_for_link.set()
        elif current_state == "application_step_2":
            await callback.message.edit_text(
                "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—ä—ë–º–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):",
                reply_markup=cancel_markup()
            )
            await ApplicationState.waiting_for_date.set()
        elif current_state == "application_step_3":
            await callback.message.edit_text(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å—ä—ë–º–∫–∏:",
                reply_markup=cancel_markup()
            )
            await ApplicationState.waiting_for_location.set()
        elif current_state == "application_step_4":
            await callback.message.edit_text(
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
                reply_markup=cancel_markup()
            )
            await ApplicationState.waiting_for_name.set()

    elif callback.data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        clear_user_state(user_id)
        await callback.message.edit_text(
            "üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_markup(user_id)
        )
        save_user_state(user_id, "main_menu", None, callback.message.message_id)

    elif callback.data == "scores":
        try:
            user_id_str = str(user_id)
            results, total = get_user_scores(user_id_str)
            
            if not results:
                text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ü–æ–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–∞–ª–ª—ã!"
            else:
                text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n" + "\n\n".join(results) + f"\n\nüåü –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total}"

            await callback.message.edit_text(
                text,
                reply_markup=main_menu_markup(user_id)
            )
            save_user_state(user_id, "main_menu", None, callback.message.message_id)
        except Exception as e:
            logger.error(f"Error getting user scores: {e}")
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /menu"
            )

    elif callback.data == "admin_panel":
        if is_admin(user_id):
            await callback.message.edit_text("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
            save_user_state(user_id, "admin_panel", None, callback.message.message_id)
        else:
            await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=["start"], state="*")
    dp.register_callback_query_handler(handle_main_menu, text=[
        "info", "apply", "scores", "admin_panel", "continue_app", "back_to_menu"
    ], state="*")
