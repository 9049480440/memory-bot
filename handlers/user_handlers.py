# user_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from services.sheets import add_or_update_user, get_user_scores
from handlers.application_handlers import start_application
from handlers.common import main_menu_markup
from common import main_menu_markup
from config import ADMIN_IDS
from handlers.admin_handlers import is_admin, admin_menu_markup

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_markup(user_id=None):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üìå –£–∑–Ω–∞—Ç—å –æ –∫–æ–Ω–∫—É—Ä—Å–µ", callback_data="info"),
        types.InlineKeyboardButton("üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply"),
        types.InlineKeyboardButton("‚≠êÔ∏è –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="scores"),
    )
    if user_id and int(user_id) in ADMIN_IDS:
        markup.add(types.InlineKeyboardButton("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    add_or_update_user(message.from_user)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å ¬´–≠—Å—Ç–∞—Ñ–µ—Ç–∞ –ü–æ–±–µ–¥—ã¬ª! üëá",
        reply_markup=main_menu_markup(message.from_user.id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = callback.from_user.id

    if callback.data == "info":
        await callback.message.edit_text(
            "üìç –ö–æ–Ω–∫—É—Ä—Å –ø—Ä–∏—É—Ä–æ—á–µ–Ω –∫ 80-–ª–µ—Ç–∏—é –ü–æ–±–µ–¥—ã –∏ –ì–æ–¥—É –ó–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞.\n\n"
            "–£—á–∞—Å—Ç–≤—É–π—Ç–µ, –ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–æ—Å—Ç—ã —É –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤, –∫–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n\n"
            "üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://docs.google.com/document/d/your-link-here",
            reply_markup=main_menu_markup(user_id)
        )

    elif callback.data == "apply":
        await callback.message.edit_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏!")
        await start_application(callback.message)

    elif callback.data == "scores":
        user_id_str = str(user_id)
        results, total = get_user_scores(user_id_str)
        if not results:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ü–æ–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–∞–ª–ª—ã!"
        else:
            text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n" + "\n\n".join(results) + f"\n\nüåü –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total}"

        await callback.message.edit_text(text, reply_markup=main_menu_markup(user_id))

    elif callback.data == "admin_panel":
        if is_admin(user_id):
            await callback.message.edit_text("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
        else:
            await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=["start"], state="*")
    dp.register_callback_query_handler(handle_main_menu, text=["info", "apply", "scores", "admin_panel"], state="*")
