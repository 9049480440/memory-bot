# user_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from services.sheets import add_or_update_user, get_user_scores, save_user_state, get_user_state
from handlers.application_handlers import start_application
from services.common import main_menu_markup, is_admin, admin_menu_markup

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    add_or_update_user(message.from_user)
    msg = await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å ¬´–≠—Å—Ç–∞—Ñ–µ—Ç–∞ –ü–æ–±–µ–¥—ã¬ª! üëá",
        reply_markup=main_menu_markup(user_id)
    )
    save_user_state(user_id, "main_menu", None, msg.message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = callback.from_user.id
    current_state, _, last_message_id = get_user_state(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if current_state.startswith("application_step"):
        step = int(current_state.split("_")[-1])
        data, _ = await state.get_data(), last_message_id
        if step == 1:
            await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É –ø–∞–º—è—Ç–Ω–∏–∫–∞.", reply_markup=cancel_markup)
            await ApplicationState.waiting_for_link.set()
        elif step == 2:
            await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—ä—ë–º–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=cancel_markup)
            await ApplicationState.waiting_for_date.set()
        elif step == 3:
            await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å—ä—ë–º–∫–∏:", reply_markup=cancel_markup)
            await ApplicationState.waiting_for_location.set()
        elif step == 4:
            await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_markup)
            await ApplicationState.waiting_for_name.set()
        return

    if callback.data == "info":
        text = (
            "üìç –ö–æ–Ω–∫—É—Ä—Å –ø—Ä–∏—É—Ä–æ—á–µ–Ω –∫ 80-–ª–µ—Ç–∏—é –ü–æ–±–µ–¥—ã –∏ –ì–æ–¥—É –ó–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞.\n\n"
            "–£—á–∞—Å—Ç–≤—É–π—Ç–µ, –ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–æ—Å—Ç—ã —É –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤, –∫–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n\n"
            "üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://docs.google.com/document/d/your-link-here"
        )
        await callback.message.edit_text(
            text,
            reply_markup=main_menu_markup(user_id)
        )
        save_user_state(user_id, "main_menu", None, callback.message.message_id)

    elif callback.data == "apply":
        await callback.message.edit_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏!")
        await start_application(callback.message)

    elif callback.data == "scores":
        user_id_str = str(user_id)
        results, total = get_user_scores(user_id_str)
        if not results:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ü–æ–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–∞–ª–ª—ã!"
        else:
            text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n" + "\n\n".join(results) + f"\n\nüåü –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total}"

        await callback.message.edit_text(
            text,
            reply_markup=main_menu_markup(user_id)
        )
        save_user_state(user_id, "main_menu", None, callback.message.message_id)

    elif callback.data == "admin_panel":
        if is_admin(user_id):
            await callback.message.edit_text("üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_markup())
            save_user_state(user_id, "admin_panel", None, callback.message.message_id)
        else:
            await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=["start"], state="*")
    dp.register_callback_query_handler(handle_main_menu, text=["info", "apply", "scores", "admin_panel"], state="*")
