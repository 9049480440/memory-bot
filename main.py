# main.py

import logging
import os
import asyncio
import datetime
import json  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
from aiogram import Bot, Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Update
from aiogram.dispatcher.middlewares import BaseMiddleware

from config import BOT_TOKEN
from handlers import (
    user_handlers,
    application_handlers,
    fallback_handler,
    admin_handlers
)
from services.sheets import send_reminders_to_inactive, state_sheet  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º state_sheet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ —Å –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class LoggingMiddleware(BaseMiddleware):
    async def on_process_update(self, update: Update, data: dict):
        if update.message:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {update.message.from_user.id}: {update.message.text}")
        elif update.callback_query:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç user_id {update.callback_query.from_user.id}: {update.callback_query.data}")

dp.middleware.setup(LoggingMiddleware())

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
user_handlers.register_handlers(dp)
application_handlers.register_application_handlers(dp)
admin_handlers.register_admin_handlers(dp)
fallback_handler.register_fallback(dp)

# üîî –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö
async def check_incomplete_users():
    while True:
        now = datetime.datetime.now()
        current_time = now.time()
        night_start = datetime.time(22, 30)  # 22:30
        morning_end = datetime.time(8, 0)    # 08:00
        is_night = (current_time >= night_start or current_time < morning_end)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        try:
            if state_sheet is None:
                logger.error("[ERROR] –õ–∏—Å—Ç 'UserState' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await asyncio.sleep(3600)
                continue

            all_rows = state_sheet.get_all_values()
            for row in all_rows[1:]:
                user_id = row[0]
                state = row[1] if len(row) > 1 else "main_menu"
                data_str = row[2] if len(row) > 2 else ""
                data = json.loads(data_str) if data_str else None

                if state.startswith("application_step") and data and "start_time" in data:
                    start_time = datetime.datetime.fromisoformat(data["start_time"])
                    delta = now - start_time
                    if delta > datetime.timedelta(hours=1) and delta < datetime.timedelta(hours=2):
                        if not is_night:
                            try:
                                await bot.send_message(user_id, "üëã –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É, –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∏–º?")
                                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {now}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        else:
                            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ª–æ–∂–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å –Ω–æ—á—å (–≤—Ä–µ–º—è: {current_time})")
                    if delta > datetime.timedelta(days=1):
                        clear_user_state(user_id)
                        logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 –¥–Ω—è")
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –≤ check_incomplete_users: {e}")

        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç

# üîî –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
async def check_inactive_users():
    while True:
        now = datetime.datetime.now()
        if now.hour == 10 and now.minute == 0:
            try:
                await send_reminders_to_inactive(bot)
                logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        next_check = now.replace(hour=10, minute=0, second=0, microsecond=0)
        if now.hour >= 10:
            next_check += datetime.timedelta(days=1)
        seconds_to_next_check = (next_check - now).total_seconds()
        await asyncio.sleep(seconds_to_next_check)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(_):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å polling...")
    asyncio.create_task(check_incomplete_users())
    asyncio.create_task(check_inactive_users())
    logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
