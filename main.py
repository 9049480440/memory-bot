#main.py

import logging
import os
import asyncio
import datetime
from aiogram import Bot, Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Update  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

from config import BOT_TOKEN
from handlers import (
    user_handlers,
    application_handlers,
    fallback_handler,
    admin_handlers
)
from handlers.application_handlers import incomplete_users
from services.sheets import send_reminders_to_inactive

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ —Å –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
user_handlers.register_handlers(dp)
application_handlers.register_application_handlers(dp)
admin_handlers.register_admin_handlers(dp)
fallback_handler.register_fallback(dp)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def on_update(update: Update):
    if update.message:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {update.message.from_user.id}: {update.message.text}")
    elif update.callback_query:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç user_id {update.callback_query.from_user.id}: {update.callback_query.data}")

dp.middleware.setup(lambda update, data: on_update(update))

# üîî –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö
async def check_incomplete_users():
    while True:
        now = datetime.datetime.now()
        for user_id, started_at in list(incomplete_users.items()):
            delta = now - started_at
            if delta > datetime.timedelta(hours=1) and delta < datetime.timedelta(hours=2):
                try:
                    await bot.send_message(user_id, "üëã –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É, –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∏–º?")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            if delta > datetime.timedelta(days=1):
                incomplete_users.pop(user_id, None)
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç

# üîî –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
async def check_inactive_users():
    while True:
        now = datetime.datetime.now()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤ 10:00
        if now.hour == 10 and now.minute == 0:
            try:
                await send_reminders_to_inactive(bot)
                logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã, –Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ 10:00
        next_check = now.replace(hour=10, minute=0, second=0, microsecond=0)
        if now.hour >= 10:
            next_check += datetime.timedelta(days=1)  # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤ 10:00
        seconds_to_next_check = (next_check - now).total_seconds()
        await asyncio.sleep(seconds_to_next_check)  # –°–ø–∏–º –¥–æ 10:00

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(_):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å polling...")
    asyncio.create_task(check_incomplete_users())
    asyncio.create_task(check_inactive_users())
    logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
