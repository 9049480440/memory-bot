# main.py

import logging
import os
import asyncio
import datetime
import json
from aiogram import Bot, Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Update, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.middlewares import BaseMiddleware
from services.sheets import check_sheet_structure, send_reminders_to_inactive
from config import BOT_TOKEN
from handlers import (
    user_handlers,
    application_handlers,
    fallback_handler,
    admin_handlers
)
from services.sheets import (
    send_reminders_to_inactive, 
    state_sheet, 
    clear_user_state, 
    get_all_user_ids, 
    save_user_state
)  # –î–æ–±–∞–≤–ª–µ–Ω import clear_user_state
from services.common import main_menu_markup

from services.sheets import (
    send_reminders_to_inactive, 
    state_sheet, 
    clear_user_state, 
    get_all_user_ids, 
    save_user_state,
    check_sheet_structure  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ —Å –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler('bot.log')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# –í–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
BOT_VERSION = "1.0.1"
VERSION_FILE = "bot_version.txt"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class LoggingMiddleware(BaseMiddleware):
    async def on_process_update(self, update: Update, data: dict):
        if update.message:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {update.message.from_user.id}: {update.message.text}")
        elif update.callback_query:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç user_id {update.callback_query.from_user.id}: {update.callback_query.data}")

dp.middleware.setup(LoggingMiddleware())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
def check_version_update():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é
        with open(VERSION_FILE, "r") as f:
            previous_version = f.read().strip()
            
        # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è - –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if previous_version != BOT_VERSION:
            with open(VERSION_FILE, "w") as f:
                f.write(BOT_VERSION)
            return True
        return False
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç - —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        with open(VERSION_FILE, "w") as f:
            f.write(BOT_VERSION)
        return False

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞
async def notify_users_about_update():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    users = get_all_user_ids()
    
    update_message = (
        "üîÑ –ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã!"
    )
    
    sent_count = 0
    for user_id in users:
        try:
            await bot.send_message(
                user_id, 
                update_message,
                reply_markup=main_menu_markup(user_id=user_id)
            )
            sent_count += 1
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

# –ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=["menu"], state="*")
async def command_menu(message, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.finish()
    user_id = message.from_user.id
    clear_user_state(user_id)
    
    msg = await message.answer(
        "üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_markup(user_id=user_id)
    )
    save_user_state(user_id, "main_menu", None, msg.message_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /menu")

# üîî –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö
async def check_incomplete_users():
    while True:
        try:
            now = datetime.datetime.now()
            current_time = now.time()
            night_start = datetime.time(22, 30)  # 22:30
            morning_end = datetime.time(8, 0)    # 08:00
            is_night = (current_time >= night_start or current_time < morning_end)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            if state_sheet is None:
                logger.error("[ERROR] –õ–∏—Å—Ç 'UserState' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await asyncio.sleep(3600)
                continue

            all_rows = state_sheet.get_all_values()
            for row in all_rows[1:]:
                if len(row) < 3:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    
                user_id = row[0]
                state = row[1]
                data_str = row[2]
                
                if not user_id or not user_id.isdigit():
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º user_id
                
                user_id = int(user_id)
                data = json.loads(data_str) if data_str else None

                if state.startswith("application_step") and data and "start_time" in data:
                    try:
                        start_time = datetime.datetime.fromisoformat(data["start_time"])
                        delta = now - start_time
                        
                        if delta > datetime.timedelta(hours=1) and delta < datetime.timedelta(hours=2):
                            if not is_night:
                                try:
                                    markup = InlineKeyboardMarkup()
                                    markup.add(InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="continue_app"))
                                    markup.add(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel_app"))
                                    
                                    await bot.send_message(
                                        user_id, 
                                        "üëã –í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É, –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∏–º?",
                                        reply_markup=markup
                                    )
                                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {now}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            else:
                                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ª–æ–∂–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å –Ω–æ—á—å (–≤—Ä–µ–º—è: {current_time})")
                                
                        if delta > datetime.timedelta(days=1):
                            clear_user_state(user_id)
                            logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 –¥–Ω—è")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –≤ check_incomplete_users: {e}")

        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç

# üîî –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
async def check_inactive_users():
    while True:
        try:
            now = datetime.datetime.now()
            if now.hour == 10 and now.minute < 5:  # –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –∑–∞–ø—É—Å–∫–∞ –¥–æ 5 –º–∏–Ω—É—Ç
                try:
                    await send_reminders_to_inactive(bot)
                    logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                
                # –ñ–¥–µ–º –¥–æ –∑–∞–≤—Ç—Ä–∞
                await asyncio.sleep(24 * 60 * 60 - 300)  # -5 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∫–Ω–æ
            else:
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_inactive_users: {e}")
            await asyncio.sleep(3600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ —á–∞—Å

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(_):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å polling...")
    
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
    check_sheet_structure()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    is_updated = check_version_update()
    if is_updated:
        await notify_users_about_update()
        logger.info(f"–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ {BOT_VERSION}")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(check_incomplete_users())
    asyncio.create_task(check_inactive_users())
    logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—è–≤–∫—É"
@dp.callback_query_handler(text="continue_app", state="*")
async def continue_application(callback_query, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    user_id = callback_query.from_user.id
    await state.finish()
    
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –∑–∞—è–≤–∫–∏
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await callback_query.message.delete()
    await application_handlers.start_application(callback_query.message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
user_handlers.register_handlers(dp)
application_handlers.register_application_handlers(dp)
admin_handlers.register_admin_handlers(dp)
fallback_handler.register_fallback(dp)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
