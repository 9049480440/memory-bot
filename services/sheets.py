# sheets.py

import os
import json
import gspread
import time
import datetime
import logging
from oauth2client.service_account import ServiceAccountCredentials
from config import SPREADSHEET_ID, ACTIVITY_SHEET_NAME
from services.common import main_menu_markup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def get_gspread_client(max_retries=3):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    
    if not creds_json:
        raise ValueError("GOOGLE_CREDENTIALS_JSON is not set or is empty.")
    
    creds_dict = json.loads(creds_json)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    for attempt in range(max_retries):
        try:
            client = gspread.authorize(creds)
            return client
        except Exception as e:
            if attempt < max_retries - 1:
                logger.warning(f"Attempt {attempt+1} to connect to Google Sheets failed: {e}. Retrying...")
                time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            else:
                logger.error(f"Failed to connect to Google Sheets after {max_retries} attempts")
                raise

client = get_gspread_client()

# üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
try:
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet(ACTIVITY_SHEET_NAME)
except Exception as e:
    logger.error(f"Error accessing Activity sheet: {e}")
    sheet = None

# üìÑ –õ–∏—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    state_sheet = client.open_by_key(SPREADSHEET_ID).worksheet("UserState")
except Exception:
    # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    try:
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        state_sheet = spreadsheet.add_worksheet(title="UserState", rows="1000", cols="4")
        state_sheet.append_row(["user_id", "state", "data", "last_message_id"])
        logger.info("Created new UserState worksheet")
    except Exception as e:
        logger.error(f"Failed to create UserState worksheet: {e}")
        state_sheet = None

def add_or_update_user(user):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    if sheet is None:
        logger.warning("[WARNING] –õ–∏—Å—Ç '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        user_id = str(user.id)
        all_users = sheet.get_all_values()
        user_ids = [row[0] for row in all_users[1:]]
        
        current_date = datetime.datetime.now().strftime("%d.%m.%Y")
        
        if user_id in user_ids:
            idx = user_ids.index(user_id) + 2
            sheet.update_cell(idx, 2, user.username or '')
            sheet.update_cell(idx, 3, user.full_name)
            sheet.update_cell(idx, 4, current_date)
            sheet.update_cell(idx, 5, '–≤—Ö–æ–¥')
            logger.info(f"Updated user {user_id} in Activity sheet")
        else:
            new_row = [
                str(user.id),
                user.username or '',
                user.full_name,
                current_date,
                '–≤—Ö–æ–¥',
                '',
                '0'
            ]
            sheet.append_row(new_row)
            logger.info(f"Added new user {user_id} to Activity sheet")
    except Exception as e:
        logger.error(f"[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω: {e}")

def update_user_score_in_activity(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    if sheet is None:
        return
    try:
        user_id = str(user_id)
        all_users = sheet.get_all_values()
        user_ids = [row[0] for row in all_users[1:]]
        if user_id in user_ids:
            idx = user_ids.index(user_id) + 2
            _, total = get_user_scores(user_id)
            sheet.update_cell(idx, 7, str(total))
            logger.info(f"Updated score for user {user_id}: {total}")
    except Exception as e:
        logger.error(f"[ERROR] update_user_score_in_activity: {e}")

def export_rating_to_sheet():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç"""
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–†–µ–π—Ç–∏–Ω–≥")
        top_users = get_top_users(limit=100)

        sheet_app.clear()
        sheet_app.append_row(["user_id", "–∏–º—è", "username", "telegram_link", "—Å–∫–æ–ª—å–∫–æ_–±–∞–ª–ª–æ–≤"])

        for user in top_users:
            user_id = user.get("user_id", "")
            name = user.get("name", "")
            username = user.get("username", "").strip()
            if username:
                link = f"https://t.me/{username.lstrip('@')}"
            else:
                link = f"tg://user?id={user_id}"
            total = user.get("total", 0)

            sheet_app.append_row([
                user_id,
                name,
                username,
                link,
                total
            ])
            logger.info(f"[INFO] –ó–∞–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å username {username} –∏ —Å—Å—ã–ª–∫–æ–π {link}")
        
        return True
    except Exception as e:
        logger.error(f"[ERROR] export_rating_to_sheet: {e}")
        return False

def submit_application(user, date_text, location, monument_name, link):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É –ó–∞—è–≤–∫–∏"""
    logger.info(f"[DEBUG] submit_application –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: date_text={date_text}, location={location}, monument_name={monument_name}, link={link}")
    
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞—è–≤–∫–∏")
    except Exception as e:
        logger.error(f"[ERROR] –õ–∏—Å—Ç '–ó–∞—è–≤–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return None

    submission_id = f"{user.id}_{int(time.time())}"
    submitted_at = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

    # –°—Ç—Ä–æ–∏–º –º–∞—Å—Å–∏–≤ –≤ —Ç–æ—á–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    # A         B          C      D           E       F        G        H          I      J
    # user_id | username | –∏–º—è | –∑–∞—è–≤–∫–∞_id | —Å—Å—ã–ª–∫–∞ | –æ—Ç–≤–µ—Ç_1 | –æ—Ç–≤–µ—Ç_2 | –¥–∞—Ç–∞_–ø–æ–¥–∞—á–∏ | –±–∞–ª–ª—ã | –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_–∞–¥–º–∏–Ω–∞
    new_row = [
        str(user.id),             # user_id (A)
        user.username or "",      # username (B)
        user.full_name,           # –∏–º—è (C)
        submission_id,            # –∑–∞—è–≤–∫–∞_id (D)
        link,                     # —Å—Å—ã–ª–∫–∞ (E)
        date_text,                # –æ—Ç–≤–µ—Ç_1 (F) - –¥–∞—Ç–∞ —Å—ä–µ–º–∫–∏
        location,                 # –æ—Ç–≤–µ—Ç_2 (G) - –≥–æ—Ä–æ–¥/–º–µ—Å—Ç–æ
        submitted_at,             # –¥–∞—Ç–∞_–ø–æ–¥–∞—á–∏ (H)
        "",                       # –±–∞–ª–ª—ã (I)
        monument_name             # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_–∞–¥–º–∏–Ω–∞ (J) - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∞
    ]

    try:
        sheet_app.append_row(new_row)
        logger.info(f"Application submitted successfully: {submission_id}, date: {date_text}, location: {location}, monument: {monument_name}")
        return submission_id
    except Exception as e:
        logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É: {e}")
        return None

def get_user_scores(user_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—â–∏–π —Å—á–µ—Ç"""
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞—è–≤–∫–∏")
    except Exception as e:
        logger.error(f"[ERROR] Cannot access Applications sheet: {e}")
        return [], 0

    all_rows = sheet_app.get_all_values()[1:]
    user_rows = [row for row in all_rows if row[0] == user_id]

    results = []
    total_score = 0

    for row in user_rows:
        link = row[4] if len(row) > 4 else ""
        date = row[5] if len(row) > 5 else ""
        location = row[6] if len(row) > 6 else ""
        name = row[3] if len(row) > 3 else ""
        try:
            score = int(row[8]) if len(row) > 8 and row[8].isdigit() else 0
        except:
            score = 0
        total_score += score
        results.append(f"üìç {name} ({location}, {date}) ‚Äî {score} –±–∞–ª–ª–æ–≤\nüîó {link}")

    return results, total_score

def get_inactive_users(days=21):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞—è–≤–∫–∏")
    except Exception as e:
        logger.error(f"[ERROR] –õ–∏—Å—Ç '–ó–∞—è–≤–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return []

    all_rows = sheet_app.get_all_values()[1:]
    user_data = {}

    for row in all_rows:
        if len(row) < 8:
            continue

        user_id = row[0]
        username = row[1]
        full_name = row[2]
        submitted_at_str = row[7]

        try:
            submitted_at = datetime.datetime.strptime(submitted_at_str.split(" ")[0], "%d.%m.%Y")
        except:
            continue

        if user_id not in user_data or submitted_at > user_data[user_id]["last_submission"]:
            user_data[user_id] = {
                "user_id": int(user_id),
                "username": username,
                "full_name": full_name,
                "last_submission": submitted_at
            }

    now = datetime.datetime.now()
    inactive = []

    for user in user_data.values():
        days_since_submission = (now - user["last_submission"]).days
        if days_since_submission >= days:
            inactive.append({
                "user_id": user["user_id"],
                "username": user["username"],
                "days_since": days_since_submission
            })

    return inactive

async def send_reminders_to_inactive(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–∞–∂–¥—ã–µ 21 –¥–µ–Ω—å, –¥–æ 24 –Ω–æ—è–±—Ä—è 2025"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –∫–æ–Ω–∫—É—Ä—Å–∞ - 24 –Ω–æ—è–±—Ä—è 2025
    now = datetime.datetime.now()
    end_date = datetime.datetime(2025, 11, 24)

    if now > end_date:
        logger.info("[INFO] –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω (–ø–æ—Å–ª–µ 24.11.2025), –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    inactive_users = get_inactive_users(days=21)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–º, —É –∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏
    # –∫—Ä–∞—Ç–Ω–æ 21 (21, 42, 63, 84, ...)
    for user in inactive_users:
        user_id = user["user_id"]
        username = user["username"]
        days_since = user["days_since"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ç–Ω—ã 21
        if days_since % 21 == 0:
            try:
                await bot.send_message(
                    user_id,
                    f"–ü—Ä–∏–≤–µ—Ç, {username or '—É—á–∞—Å—Ç–Ω–∏–∫'}! –¢—ã –Ω–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫–∏ —É–∂–µ {days_since} –¥–Ω–µ–π. "
                    "–í–µ—Ä–Ω–∏—Å—å –≤ –∫–æ–Ω–∫—É—Ä—Å '–≠—Å—Ç–∞—Ñ–µ—Ç–∞ –ü–æ–±–µ–¥—ã' –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π –±–∞–ª–ª—ã! –ü–æ–¥–∞–π –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ /start.",
                    reply_markup=main_menu_markup(user_id=user_id)
                )
                logger.info(f"[INFO] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω {days_since} –¥–Ω–µ–π)")
            except Exception as e:
                logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user_id}: {e}")

def get_submission_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º"""
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞—è–≤–∫–∏")
        rows = sheet_app.get_all_values()[1:]
    except Exception as e:
        logger.error(f"[ERROR] Cannot get submission stats: {e}")
        return 0, 0

    user_ids = set()
    for row in rows:
        if len(row) >= 1:
            user_ids.add(row[0])
    return len(rows), len(user_ids)

def set_score_and_notify_user(submission_id: str, score: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–ª–ª—ã –¥–ª—è –∑–∞—è–≤–∫–∏ –∏ –≥–æ—Ç–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞—è–≤–∫–∏")
        rows = sheet_app.get_all_values()
        headers = rows[0]
        data = rows[1:]

        for idx, row in enumerate(data, start=2):
            if len(row) >= 4 and row[3] == submission_id:
                user_id = row[0]
                sheet_app.update_cell(idx, 9, str(score))
                logger.info(f"[INFO] –ë–∞–ª–ª—ã {score} –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è submission_id {submission_id}")
                return True
        
        logger.warning(f"[WARNING] –ó–∞—è–≤–∫–∞ —Å submission_id {submission_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: {e}")
        return False

async def send_score_notification(user_id: int, score: int, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤"""
    try:
        await bot.send_message(
            user_id,
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {score} –±–∞–ª–ª(–æ–≤).\n"
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏ –∂–µ–ª–∞–µ–º —É–¥–∞—á–∏ ‚Äî –≤—ã –Ω–∞ –ø—É—Ç–∏ –∫ –ø–æ–±–µ–¥–µ! üí™",
            reply_markup=main_menu_markup(user_id=user_id)
        )
        logger.info(f"[INFO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id}: {e}")

def get_all_user_ids():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞—è–≤–∫–∏")
        rows = sheet_app.get_all_values()[1:]
        user_ids = set()
        for row in rows:
            if len(row) >= 1 and row[0].isdigit():
                user_ids.add(int(row[0]))
        return list(user_ids)
    except Exception as e:
        logger.error(f"[ERROR] get_all_user_ids: {e}")
        return []

def get_top_users(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–ª–∞–º"""
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞—è–≤–∫–∏")
        rows = sheet_app.get_all_values()[1:]
    except Exception as e:
        logger.error(f"[ERROR] get_top_users: {e}")
        return []

    activity_usernames = {}
    if sheet:
        activity_rows = sheet.get_all_values()[1:]
        for row in activity_rows:
            if len(row) >= 2:
                user_id = row[0]
                username = row[1].strip()
                activity_usernames[user_id] = username

    stats = {}

    for row in rows:
        if len(row) < 9:
            continue

        user_id = row[0]
        username = row[1].strip()
        name = row[2]
        score_str = row[8]

        if not username and user_id in activity_usernames:
            username = activity_usernames[user_id]

        if not username:
            logger.warning(f"[WARNING] Username –¥–ª—è user_id {user_id} –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–∞—è–≤–∫–∏ –∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

        logger.info(f"[INFO] –î–ª—è user_id {user_id}: username –∏–∑ –ó–∞—è–≤–∫–∏ = {row[1]}, –∏–∑ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ = {activity_usernames.get(user_id, '–Ω–µ—Ç')}")

        try:
            score = int(score_str) if score_str.strip().isdigit() else 0
        except:
            score = 0

        if user_id not in stats:
            stats[user_id] = {
                "user_id": user_id,
                "username": username,
                "name": name,
                "count": 0,
                "total": 0
            }

        stats[user_id]["count"] += 1
        stats[user_id]["total"] += score

    sorted_users = sorted(stats.values(), key=lambda u: u["total"], reverse=True)
    return sorted_users[:limit]

def check_sheet_structure():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–∞ '–ó–∞—è–≤–∫–∏' –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        sheet_app = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞—è–≤–∫–∏")
        headers = sheet_app.row_values(1)
        logger.info("[DEBUG] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ '–ó–∞—è–≤–∫–∏':")
        for i, header in enumerate(headers):
            logger.info(f"[DEBUG] –ö–æ–ª–æ–Ω–∫–∞ {i+1} (–±—É–∫–≤–∞ {chr(65+i)}): '{header}'")
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_state(user_id, state, data=None, last_message_id=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö."""
    if state_sheet is None:
        logger.error("[ERROR] UserState sheet is not available")
        return
        
    try:
        all_rows = state_sheet.get_all_values()
        user_ids = [row[0] for row in all_rows[1:]]
        user_id = str(user_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in user_ids:
            idx = user_ids.index(user_id) + 2
            state_sheet.update_cell(idx, 2, state)
            state_sheet.update_cell(idx, 3, json.dumps(data) if data else "")
            if last_message_id:
                state_sheet.update_cell(idx, 4, str(last_message_id))
            logger.info(f"Updated state for user {user_id}: {state}")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            new_row = [
                user_id,
                state,
                json.dumps(data) if data else "",
                str(last_message_id) if last_message_id else ""
            ]
            state_sheet.append_row(new_row)
            logger.info(f"Added new state for user {user_id}: {state}")
    except Exception as e:
        logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è user_id {user_id}: {e}")

def get_user_state(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google –¢–∞–±–ª–∏—Ü."""
    if state_sheet is None:
        logger.error("[ERROR] UserState sheet is not available")
        return "main_menu", None, None
        
    try:
        all_rows = state_sheet.get_all_values()
        user_id = str(user_id)
        for row in all_rows[1:]:
            if row[0] == user_id:
                state = row[1] if len(row) > 1 else "main_menu"
                data = json.loads(row[2]) if len(row) > 2 and row[2] else None
                last_message_id = int(row[3]) if len(row) > 3 and row[3].isdigit() else None
                return state, data, last_message_id
        return "main_menu", None, None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e:
        logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è user_id {user_id}: {e}")
        return "main_menu", None, None

def clear_user_state(user_id):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö."""
    if state_sheet is None:
        logger.error("[ERROR] UserState sheet is not available")
        return
        
    try:
        all_rows = state_sheet.get_all_values()
        user_ids = [row[0] for row in all_rows[1:]]
        user_id = str(user_id)

        if user_id in user_ids:
            idx = user_ids.index(user_id) + 2
            state_sheet.update_cell(idx, 2, "main_menu")
            state_sheet.update_cell(idx, 3, "")
            state_sheet.update_cell(idx, 4, "")
            logger.info(f"Cleared state for user {user_id}")
    except Exception as e:
        logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è user_id {user_id}: {e}")
